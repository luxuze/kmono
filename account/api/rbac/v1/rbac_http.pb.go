// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type V1HTTPServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Me(context.Context, *MeRequest) (*MeReply, error)
}

func RegisterV1HTTPServer(s *http.Server, srv V1HTTPServer) {
	r := s.Route("/")
	r.POST("/rbac/login", _V1_Login0_HTTP_Handler(srv))
	r.GET("/rbac/me", _V1_Me0_HTTP_Handler(srv))
}

func _V1_Login0_HTTP_Handler(srv V1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.rbac.V1/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _V1_Me0_HTTP_Handler(srv V1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.rbac.V1/Me")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Me(ctx, req.(*MeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MeReply)
		return ctx.Result(200, reply)
	}
}

type V1HTTPClient interface {
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Me(ctx context.Context, req *MeRequest, opts ...http.CallOption) (rsp *MeReply, err error)
}

type V1HTTPClientImpl struct {
	cc *http.Client
}

func NewV1HTTPClient(client *http.Client) V1HTTPClient {
	return &V1HTTPClientImpl{client}
}

func (c *V1HTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/rbac/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.rbac.V1/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *V1HTTPClientImpl) Me(ctx context.Context, in *MeRequest, opts ...http.CallOption) (*MeReply, error) {
	var out MeReply
	pattern := "/rbac/me"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.rbac.V1/Me"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
